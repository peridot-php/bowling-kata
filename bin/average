#!/usr/bin/env php
<?php
$vendor = realpath(__DIR__ . '/../vendor');
$root = realpath(__DIR__ . '/../');
chdir($root);

$descriptorspec = array(
    0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
    1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
    2 => array("pipe", "w") // stderr is a file to write to
);

$data = [
    'phpunit' => [],
    'phpspec' => [],
    'peridot' => []
    ];

function execute($command, $key) {
    global $data;
    global $descriptorspec;
    $proc = proc_open($command, $descriptorspec, $pipes);
    $status = proc_get_status($proc);
    while ($status['running']) {
        usleep(20000);
        $status = proc_get_status($proc);
    }
    $data[$key][] = stream_get_contents($pipes[2]);
    proc_close($proc);
}

for ($i = 0; $i < 25; $i++) {
    $output = [];
    $phpunit = "time $vendor/bin/phpunit";
    $phpspec = "time $vendor/bin/phpspec run";
    $peridot = "time $vendor/bin/peridot";
    execute($phpunit, 'phpunit');
    usleep(50000);
    execute($phpspec, 'phpspec');
    usleep(50000);
    execute($peridot, 'peridot');
    usleep(50000);
}

function getTime($timestr) {
    $parts = explode("\n", trim($timestr));
    $real = '/real[\s]+0m0[.]([\d]+)s$/';
    $user = '/user[\s]+0m0[.]([\d]+)s$/m';
    preg_match($real, $parts[0], $rmatches);
    preg_match($user, $parts[1], $umatches);
    return [(int)$rmatches[1], (int) $umatches[1]];
}

function outputAverage($command, $real, $user, $size) {
    print "\nCommand: $command\n";
    $realAvg = $real / $size;
    $userAvg = $user / $size;
    print "Real: 0.{$realAvg}s\n";
    print "User: 0.{$userAvg}s\n\n";
}

foreach ($data as $command => $times) {
    $realTotal = 0;
    $userTotal = 0;
    foreach ($times as $time) {
        list($real, $user) = getTime($time);
        $realTotal += $real;
        $userTotal += $user;
    }
    outputAverage($command, $realTotal, $userTotal, count($times));
}
